/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface BridgeInterface extends utils.Interface {
  functions: {
    "FEE_DENOMINATOR()": FunctionFragment;
    "MAX_FEE()": FunctionFragment;
    "addSupportedFromToken(uint256,address)": FunctionFragment;
    "calculateRelayFee(address,uint256,uint256)": FunctionFragment;
    "fee()": FunctionFragment;
    "feeRecevier()": FunctionFragment;
    "gasFee(uint256,address)": FunctionFragment;
    "isSupportedToken(uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "relayToken(address,address,uint256,uint256)": FunctionFragment;
    "removeSupportedFromToken(uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGasFee(uint256,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFee(uint256)": FunctionFragment;
    "updateFeeReceiver(address)": FunctionFragment;
    "updateVault(address)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FEE_DENOMINATOR"
      | "MAX_FEE"
      | "addSupportedFromToken"
      | "calculateRelayFee"
      | "fee"
      | "feeRecevier"
      | "gasFee"
      | "isSupportedToken"
      | "owner"
      | "relayToken"
      | "removeSupportedFromToken"
      | "renounceOwnership"
      | "setGasFee"
      | "transferOwnership"
      | "updateFee"
      | "updateFeeReceiver"
      | "updateVault"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addSupportedFromToken",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRelayFee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRecevier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gasFee",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportedToken",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relayToken",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupportedFromToken",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGasFee",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeReceiver",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "updateVault", values: [string]): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRelayFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecevier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relayToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportedFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGasFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "FeeRecevierUpdated(address,address)": EventFragment;
    "FeeUpdated(uint256,uint256)": EventFragment;
    "GasFeeUpdated(uint256,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RelayToken(address,address,address,uint256,uint256)": EventFragment;
    "VaultUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeRecevierUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultUpdated"): EventFragment;
}

export interface FeeRecevierUpdatedEventObject {
  oldFeeRecevier: string;
  newFeeRecevier: string;
}
export type FeeRecevierUpdatedEvent = TypedEvent<
  [string, string],
  FeeRecevierUpdatedEventObject
>;

export type FeeRecevierUpdatedEventFilter =
  TypedEventFilter<FeeRecevierUpdatedEvent>;

export interface FeeUpdatedEventObject {
  oldFee: BigNumber;
  newFee: BigNumber;
}
export type FeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  FeeUpdatedEventObject
>;

export type FeeUpdatedEventFilter = TypedEventFilter<FeeUpdatedEvent>;

export interface GasFeeUpdatedEventObject {
  chainId: BigNumber;
  token: string;
  oldFee: BigNumber;
  newFee: BigNumber;
}
export type GasFeeUpdatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  GasFeeUpdatedEventObject
>;

export type GasFeeUpdatedEventFilter = TypedEventFilter<GasFeeUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RelayTokenEventObject {
  from: string;
  to: string;
  token: string;
  chainId: BigNumber;
  amount: BigNumber;
}
export type RelayTokenEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  RelayTokenEventObject
>;

export type RelayTokenEventFilter = TypedEventFilter<RelayTokenEvent>;

export interface VaultUpdatedEventObject {
  oldVault: string;
  newVault: string;
}
export type VaultUpdatedEvent = TypedEvent<
  [string, string],
  VaultUpdatedEventObject
>;

export type VaultUpdatedEventFilter = TypedEventFilter<VaultUpdatedEvent>;

export interface Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addSupportedFromToken(
      _chainId: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculateRelayFee(
      token: string,
      _chainId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber]] & { result: [BigNumber, BigNumber] }>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeRecevier(overrides?: CallOverrides): Promise<[string]>;

    gasFee(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isSupportedToken(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    relayToken(
      token: string,
      _to: string,
      amount: BigNumberish,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeSupportedFromToken(
      _chainId: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setGasFee(
      _chainId: BigNumberish,
      _token: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateFeeReceiver(
      _feeRecevier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateVault(
      _vault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  addSupportedFromToken(
    _chainId: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculateRelayFee(
    token: string,
    _chainId: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  feeRecevier(overrides?: CallOverrides): Promise<string>;

  gasFee(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isSupportedToken(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  relayToken(
    token: string,
    _to: string,
    amount: BigNumberish,
    _chainId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeSupportedFromToken(
    _chainId: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setGasFee(
    _chainId: BigNumberish,
    _token: string,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateFeeReceiver(
    _feeRecevier: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateVault(
    _vault: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    addSupportedFromToken(
      _chainId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateRelayFee(
      token: string,
      _chainId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecevier(overrides?: CallOverrides): Promise<string>;

    gasFee(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupportedToken(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    relayToken(
      token: string,
      _to: string,
      amount: BigNumberish,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSupportedFromToken(
      _chainId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setGasFee(
      _chainId: BigNumberish,
      _token: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateFeeReceiver(
      _feeRecevier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVault(_vault: string, overrides?: CallOverrides): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "FeeRecevierUpdated(address,address)"(
      oldFeeRecevier?: null,
      newFeeRecevier?: null
    ): FeeRecevierUpdatedEventFilter;
    FeeRecevierUpdated(
      oldFeeRecevier?: null,
      newFeeRecevier?: null
    ): FeeRecevierUpdatedEventFilter;

    "FeeUpdated(uint256,uint256)"(
      oldFee?: null,
      newFee?: null
    ): FeeUpdatedEventFilter;
    FeeUpdated(oldFee?: null, newFee?: null): FeeUpdatedEventFilter;

    "GasFeeUpdated(uint256,address,uint256,uint256)"(
      chainId?: BigNumberish | null,
      token?: string | null,
      oldFee?: null,
      newFee?: null
    ): GasFeeUpdatedEventFilter;
    GasFeeUpdated(
      chainId?: BigNumberish | null,
      token?: string | null,
      oldFee?: null,
      newFee?: null
    ): GasFeeUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RelayToken(address,address,address,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      token?: string | null,
      chainId?: null,
      amount?: null
    ): RelayTokenEventFilter;
    RelayToken(
      from?: string | null,
      to?: string | null,
      token?: string | null,
      chainId?: null,
      amount?: null
    ): RelayTokenEventFilter;

    "VaultUpdated(address,address)"(
      oldVault?: null,
      newVault?: null
    ): VaultUpdatedEventFilter;
    VaultUpdated(oldVault?: null, newVault?: null): VaultUpdatedEventFilter;
  };

  estimateGas: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    addSupportedFromToken(
      _chainId: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    calculateRelayFee(
      token: string,
      _chainId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecevier(overrides?: CallOverrides): Promise<BigNumber>;

    gasFee(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupportedToken(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    relayToken(
      token: string,
      _to: string,
      amount: BigNumberish,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeSupportedFromToken(
      _chainId: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setGasFee(
      _chainId: BigNumberish,
      _token: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateFeeReceiver(
      _feeRecevier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateVault(
      _vault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addSupportedFromToken(
      _chainId: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculateRelayFee(
      token: string,
      _chainId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRecevier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasFee(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupportedToken(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayToken(
      token: string,
      _to: string,
      amount: BigNumberish,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeSupportedFromToken(
      _chainId: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setGasFee(
      _chainId: BigNumberish,
      _token: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateFeeReceiver(
      _feeRecevier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateVault(
      _vault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
